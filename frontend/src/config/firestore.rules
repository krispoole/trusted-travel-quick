rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to validate location data
    function isValidLocationData(data) {
      return data.keys().hasAll(['name', 'city', 'state', 'operational']) &&
        data.name is string &&
        data.city is string &&
        data.state is string &&
        data.operational is bool;
    }

    // Allow read access to all locations and create if doesn't exist
    match /locations/{locationId} {
      allow read: if isAuthenticated();
      // Only allow creation with valid data and if document doesn't exist
      allow create: if isAuthenticated() && 
        !exists(/databases/$(database)/documents/locations/$(locationId)) &&
        isValidLocationData(request.resource.data);
      allow update, delete: if false;
    }

    // User-specific location selections
    match /userLocations/{userLocationId} {
      function isValidUserLocationId() {
        return userLocationId.matches(request.auth.uid + '_.*');
      }

      function isValidUserLocationData(data) {
        return data.keys().hasAll(['userId', 'locationId', 'selectedAt']) &&
          data.userId == request.auth.uid &&
          data.locationId is string &&
          data.selectedAt is timestamp;
      }

      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        isValidUserLocationId() &&
        isValidUserLocationData(request.resource.data) &&
        exists(/databases/$(database)/documents/locations/$(request.resource.data.locationId));
      
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        isValidUserLocationId();
    }
  }
}